//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClassLibrary2.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DataClasses")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniversityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bio {
            get {
                return this.BioField;
            }
            set {
                if ((object.ReferenceEquals(this.BioField, value) != true)) {
                    this.BioField = value;
                    this.RaisePropertyChanged("Bio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string University {
            get {
                return this.UniversityField;
            }
            set {
                if ((object.ReferenceEquals(this.UniversityField, value) != true)) {
                    this.UniversityField = value;
                    this.RaisePropertyChanged("University");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Listing", Namespace="http://schemas.datacontract.org/2004/07/DataClasses")]
    [System.SerializableAttribute()]
    public partial class Listing : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ListingIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Heading {
            get {
                return this.HeadingField;
            }
            set {
                if ((object.ReferenceEquals(this.HeadingField, value) != true)) {
                    this.HeadingField = value;
                    this.RaisePropertyChanged("Heading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ListingID {
            get {
                return this.ListingIDField;
            }
            set {
                if ((this.ListingIDField.Equals(value) != true)) {
                    this.ListingIDField = value;
                    this.RaisePropertyChanged("ListingID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/createNewUser", ReplyAction="http://tempuri.org/IService1/createNewUserResponse")]
        bool createNewUser(ClassLibrary2.ServiceReference1.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/createNewUser", ReplyAction="http://tempuri.org/IService1/createNewUserResponse")]
        System.Threading.Tasks.Task<bool> createNewUserAsync(ClassLibrary2.ServiceReference1.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateUser", ReplyAction="http://tempuri.org/IService1/updateUserResponse")]
        bool updateUser(ClassLibrary2.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateUser", ReplyAction="http://tempuri.org/IService1/updateUserResponse")]
        System.Threading.Tasks.Task<bool> updateUserAsync(ClassLibrary2.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/retrieveUser", ReplyAction="http://tempuri.org/IService1/retrieveUserResponse")]
        ClassLibrary2.ServiceReference1.User retrieveUser(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/retrieveUser", ReplyAction="http://tempuri.org/IService1/retrieveUserResponse")]
        System.Threading.Tasks.Task<ClassLibrary2.ServiceReference1.User> retrieveUserAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/createNewListing", ReplyAction="http://tempuri.org/IService1/createNewListingResponse")]
        bool createNewListing(ClassLibrary2.ServiceReference1.Listing newListing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/createNewListing", ReplyAction="http://tempuri.org/IService1/createNewListingResponse")]
        System.Threading.Tasks.Task<bool> createNewListingAsync(ClassLibrary2.ServiceReference1.Listing newListing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllUsers", ReplyAction="http://tempuri.org/IService1/getAllUsersResponse")]
        ClassLibrary2.ServiceReference1.User[] getAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllUsers", ReplyAction="http://tempuri.org/IService1/getAllUsersResponse")]
        System.Threading.Tasks.Task<ClassLibrary2.ServiceReference1.User[]> getAllUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ClassLibrary2.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ClassLibrary2.ServiceReference1.IService1>, ClassLibrary2.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool createNewUser(ClassLibrary2.ServiceReference1.User newUser) {
            return base.Channel.createNewUser(newUser);
        }
        
        public System.Threading.Tasks.Task<bool> createNewUserAsync(ClassLibrary2.ServiceReference1.User newUser) {
            return base.Channel.createNewUserAsync(newUser);
        }
        
        public bool updateUser(ClassLibrary2.ServiceReference1.User user) {
            return base.Channel.updateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> updateUserAsync(ClassLibrary2.ServiceReference1.User user) {
            return base.Channel.updateUserAsync(user);
        }
        
        public ClassLibrary2.ServiceReference1.User retrieveUser(string userName) {
            return base.Channel.retrieveUser(userName);
        }
        
        public System.Threading.Tasks.Task<ClassLibrary2.ServiceReference1.User> retrieveUserAsync(string userName) {
            return base.Channel.retrieveUserAsync(userName);
        }
        
        public bool createNewListing(ClassLibrary2.ServiceReference1.Listing newListing) {
            return base.Channel.createNewListing(newListing);
        }
        
        public System.Threading.Tasks.Task<bool> createNewListingAsync(ClassLibrary2.ServiceReference1.Listing newListing) {
            return base.Channel.createNewListingAsync(newListing);
        }
        
        public ClassLibrary2.ServiceReference1.User[] getAllUsers() {
            return base.Channel.getAllUsers();
        }
        
        public System.Threading.Tasks.Task<ClassLibrary2.ServiceReference1.User[]> getAllUsersAsync() {
            return base.Channel.getAllUsersAsync();
        }
    }
}
